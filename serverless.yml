service: editmule-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: orders
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createOrder:
    handler: createOrder.main
    events:
      - http:
          path: orders
          method: post
          cors: true
          authorizer: aws_iam

  getOrder:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: getOrder.main
    events:
      - http:
          path: orders/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listOrders:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: listOrders.main
    events:
      - http:
          path: orders
          method: get
          cors: true
          authorizer: aws_iam

  updateOrder:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /orders/{id}
    # - method: PUT request
    handler: updateOrder.main
    events:
      - http:
          path: orders/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteOrder:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /orders/{id}
    # - method: DELETE request
    handler: deleteOrder.main
    events:
      - http:
          path: orders/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
